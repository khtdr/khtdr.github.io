{"categories":[{"name":"snippets","permalink":"https://khtdr.com/categories/snippets.html"},{"name":"software","permalink":"https://khtdr.com/categories/software.html"},{"name":"tutorials","permalink":"https://khtdr.com/categories/tutorials.html"}],"pages":[{"categories":["software"],"content":" opts.js is a Javascript helper library for command-line applications, for accepting and parsing command-line arguments, flags and options, and automatically generating a useful help message.\nIntroduction to Opts.js Why choose opts.js over something bigger and better?\nSmall : Under 10kb, uncompressed. Stable : Relatively unchanged since 2010. See changelog. Standalone : No package manager necessary, no compiling needed. See src/opts.js. Tested : Millions of downloads per year. See npm/opts. Quick-Start example The following example set up a custom \u0026#34;version\u0026#34; function, and opts in to the automatic help message. No pun intended.\nopts/examples/example1.js\nvar opts = require(\u0026#39;opts\u0026#39;); var options = [ { short : \u0026#39;v\u0026#39; , long : \u0026#39;version\u0026#39; , description : \u0026#39;Show version and exit\u0026#39; , callback : function () { console.log(\u0026#39;v1.0\u0026#39;); process.exit(1); } } ]; opts.parse(options, true); console.log(\u0026#39;Example 1\u0026#39;); process.exit(0); node ./example1 Example 1 node ./example1 --help Usage: node ./example1 [options] Show this help message --help Show version and exit -v, --version node ./example1 -v v1.0 See more examples below.\nInstallation No NPM dependencies are required To use opts.js, you do not need to use NPM or any package manager. It is written in plain-old Javascript, and can be downloaded and included in your Node.js project as-is. All of the examples use this approach.\ncd /path/to/your/project curl -o opts.js https://raw.githubusercontent.com/khtdr/opts/master/src/opts.js Typescript and NPM packages for convenience If you are using NPM in your project, you can install it using the name opts.\nnpm install opts Basic usage and setup To use, import the library and call opts.parse with your configurations. The various types of configurations are covered further down.\nvar opts = require(\u0026#39;opts\u0026#39;); opts.parse(options, arguments, help); or with the more modern syntax\nimport * as opts from \u0026#39;opts\u0026#39;; opts.parse(options, arguments, help); If you installed opts with NPM, the typescript definitions should automatically be available in your editor. Otherwise you can download the definition (.d.ts) file here.\nAPI configurations opts.parse(options, arguments, help)\nOptions are flag-arguments. Arguments are everything else. Consider the following hypothetical command for starting a server that listens on http://0.0.0.0:4000\nnode ./my-app start --host 0.0.0.0 -p 4000 In this example, the options are --host 0.0.0.0 and -p 4000. The argument is start. The arguments can be after, before, or among the options.\nOptions options is an array of option objects. Each option in the array can have the following fields. None are required, but you should at least provide a short or long name.\nlet options = [ { short : \u0026#39;l\u0026#39;, long : \u0026#39;list\u0026#39;, description : \u0026#39;Show a list\u0026#39;, value : false, // default false required : true, // default false callback : function (value) { ... }, }, // ... followed by more options ]; Arguments arguments require less configuration. This is an optional argument to opts.parse:\nlet arguments = [ { name : \u0026#39;script\u0026#39;, required : true, // not required by default callback : function (value) { ... }, } ]; Help auto-generator Finally, you can add an automatically generated help message by passing a last parameter of true. This is also an optional argument to opts.parse.\nopts.parse(options, true); // or if you want more control, you can do: /* options.push({ long : \u0026#39;help\u0026#39;, description : \u0026#39;Show this help message\u0026#39;, callback : require(\u0026#39;opts\u0026#39;).help, } opts.parse(options); */ More examples Showcase of features and options opts/examples/example2.js\n/** * More complex example. * * Run: * node example2.js --help * and play with the options to see the behavior. * * This example shows different ways of using the library. It is deliberately * inconsistent. Choose the style that suits you best. */ var opts = require(\u0026#39;opts\u0026#39;) , host = \u0026#39;localhost\u0026#39;; // default host value var options = [ { short : \u0026#39;v\u0026#39; , long : \u0026#39;version\u0026#39; , description : \u0026#39;Show version and exit\u0026#39; , callback : function () { console.log(\u0026#39;v1.0\u0026#39;); process.exit(1); } }, { short : \u0026#39;l\u0026#39; , long : \u0026#39;list\u0026#39; , description : \u0026#39;List all files\u0026#39; }, { short : \u0026#39;f\u0026#39; , long : \u0026#39;file\u0026#39; , description : \u0026#39;Load a file\u0026#39; , value : true , required : true }, { short : \u0026#39;d\u0026#39; , long : \u0026#39;debug\u0026#39; , description : \u0026#39;Set a debug level\u0026#39; , value : true }, { short : \u0026#39;h\u0026#39; , long : \u0026#39;host\u0026#39; , description : \u0026#39;The hostname to connect to\u0026#39; , value : true , callback : function (value) { host = value; } // override host value }, { short : \u0026#39;p\u0026#39; , long : \u0026#39;port\u0026#39; , description : \u0026#39;The port to connect to\u0026#39; , value : true }, ]; opts.parse(options, true); var port = opts.get(\u0026#39;port\u0026#39;) || 8000 // default port value , debug = opts.get(\u0026#39;d\u0026#39;) || \u0026#39;info\u0026#39; // default debug value , file = opts.get(\u0026#39;f\u0026#39;) , list = opts.get(\u0026#39;list\u0026#39;); var arg1 = opts.args()[0] , arg2 = opts.args()[1]; if (list) console.log(\u0026#39;List arg was set\u0026#39;); if (file) console.log(\u0026#39;File arg was set: \u0026#39; + file); console.log(\u0026#39;Debug level is: \u0026#39; + debug); console.log(\u0026#39;Host is: \u0026#39; + host); console.log(\u0026#39;Port is: \u0026#39; + port); if (arg1) console.log(\u0026#39;Extra arg 1: \u0026#39; + arg1); if (arg2) console.log(\u0026#39;Extra arg 2: \u0026#39; + arg2); process.exit(0); Conflict detection opts/examples/example3.js\n/** * Simple example that is broken by design (conflicting options) * * Examples: * $ node example3.js * \u0026gt; Conflicting flags: -v */ var opts = require(\u0026#39;opts\u0026#39;); var options = [ { short : \u0026#39;v\u0026#39; , description : \u0026#39;Show version and exit\u0026#39; }, { short : \u0026#39;v\u0026#39; , description : \u0026#39;Be verbose\u0026#39; }, ]; opts.parse(options); console.log(\u0026#39;Example 3\u0026#39;); process.exit(0); Using named arguments and from within a library opts/examples/example4.js\n/** * Advanced example using namespaces for a library and named arguments * * Run: * node example4.js --help * and play with the options to see the behavior. */ var opts = require(\u0026#39;opts\u0026#39;) , host = \u0026#39;localhost\u0026#39;; // default host value // Example of using some library in the same app var libOpts = [ { short : \u0026#39;l\u0026#39; , long : \u0026#39;list\u0026#39; , description : \u0026#39;Show the library list\u0026#39; , callback : function () { console.log(\u0026#39;mylib list!\u0026#39;); }, }, ]; opts.add(libOpts, \u0026#39;mylib\u0026#39;); var options = [ { short : \u0026#39;l\u0026#39; // deliberately conflicting with \u0026#39;mylib\u0026#39; option , long : \u0026#39;list\u0026#39; , description : \u0026#39;List all files\u0026#39; }, { short : \u0026#39;d\u0026#39; , long : \u0026#39;debug\u0026#39; , description : \u0026#39;Set a debug level\u0026#39; , value : true }, ]; var arguments = [ { name : \u0026#39;script\u0026#39; , required : true } , { name : \u0026#39;timeout\u0026#39; } ]; opts.parse(options, arguments, true); var debug = opts.get(\u0026#39;d\u0026#39;) || \u0026#39;info\u0026#39; // default debug value , list = opts.get(\u0026#39;list\u0026#39;); var script = opts.arg(\u0026#39;script\u0026#39;) , timeout = opts.arg(\u0026#39;timeout\u0026#39;) || 30; if (list) console.log(\u0026#39;List arg was set\u0026#39;); console.log(\u0026#39;Debug level is: \u0026#39; + debug); console.log(\u0026#39;Script is: \u0026#39; + script); console.log(\u0026#39;Timeout is: \u0026#39; + timeout); process.exit(0); You can find the source code and all examples at Github, github.com/khtdr/opts.\n","href":"https://khtdr.com/opts/","tags":["javascript","command-line","node-js","tools","npm","typescript-bindings"],"title":"opts.js"},{"categories":["tutorials"],"content":" Simple quick way to get started learning and playing with Tailwind CSS\nExample output while running dev-server, shown here: Features No \u0026#34;transpiling\u0026#34; configuration is needed (or used). No build tools need to be set up. Tiny reactive web server: ~115 lines of code with lots of comments. Minimal dependencies:\nchalk for color, socket.io for server \u0026lt;â€”\u0026gt; browser communication, and tailwindcss of course. Installation Clone the GIT repository, and install the dependencies.\ngit clone https://github.com/khtdr/tailwind-dev-server.git cd tailwind-dev-server yarn Running yarn start Then open your browser to: http://localhost:8080\nDevelopment Edit any of the following entry point files:\n./index.html ./style.css ./tailwind.js Changes will be recompiled and automatically refreshed in your browser. Errors will be displayed in the server output.\nCreate any additional HTML files as needed, using ./index.html as a starting-point reference.\nBuilding If you like what you see and want to save it and use it, run:\nyarn build And now you can use your newly-built ./tailwind-bundle.css stylesheet however you like.\n","href":"https://khtdr.com/tailwind-css-dev-server.html","tags":["javascript","live-reload","tailwind-css"],"title":"A Tailwind-CSS development server"},{"categories":["snippets"],"content":" Use a media query to set different values for variables in dark-mode.\n:root { --background-color: #eee; --text-color: #222; } @media (prefers-color-scheme: dark) { :root { --background-color: #222; --text-color: #eee; } } body { background-color: var(--background-color); color: var(--text-color); } ","href":"https://khtdr.com/dark-mode-light-mode-css.html","tags":["css"],"title":"Dark-Mode Light-Mode Css"},{"categories":["software"],"content":" pageboy Write your shell scripts in any combination of scripting languages.\nExample Script example.pb\n#!/usr/bin/env pageboy echo in Bash $PAGE php echo back to Bash #!/usr/bin/env php \u0026lt;?php echo \u0026#34;in PHP\\n\u0026#34;; Running the following, produces:\nchmod +x ./example.pb ./example.pb in Bash in PHP back to Bash You can mix and match all you want. If your script uses valid shebangs, it will work. If it doesn\u0026rsquo;t, it\u0026rsquo;s a bug and please let me know. It also supports the (not quite right) awk shebang: #!/usr/bin/env awk.\ntests suite status: ./run-tests.sh pageboy-v2.1.3 ./pageboy-test # runs as pageboy script ./pageboy-test -r \u0026lt;page\u0026gt; # runs requested page ./pageboy-test -p \u0026lt;page\u0026gt; # prints requested page ./pageboy-test -c # compiles to bash script ./pageboy-test -d # dumps page table ./pageboy-test -h # shows this message https://github.com/khtdr/pageboy ./tests/aliased.pb ... passed ./tests/args.pb ... passed ./tests/awk.pb ... passed ./tests/confusing.pb ... passed ./tests/dump.pb ... passed ./tests/lots.pb ... passed ./tests/named.pb ... passed ./tests/pageboy.pb ... passed ./tests/paths.pb ... passed ./tests/plain-bash.pb ... passed ./tests/print-php.pb ... passed ./tests/pwd.pb ... passed ./tests/run-php.pb ... passed ./tests/version.pb ... passed installation \u0026amp; quickstart Current version: 2.1.3 Download the pageboy bash script and put into your $PATH (ie. ~/bin/). Start using #!/usr/bin/env pageboy as your shebang line in your bash scripts. Call other \u0026ldquo;pages\u0026rdquo; of your script by using the pre-defined $PAGE command in your scripts. #!/usr/bin/env pageboy $PAGE php | wc #!/usr/bin/env php \u0026lt;?php phpinfo(); 934 3524 29671 If you want multiple pages of the same language, append an index, starting at 1, to the pagename.\n#!/usr/bin/env pageboy cat \u0026lt;($PAGE php1) \u0026lt;($PAGE php2) #!/usr/bin/env php \u0026lt;?php echo \u0026#34;one\u0026#34;; #!/usr/bin/env php \u0026lt;?php echo \u0026#34;two\u0026#34;; onetwo You can distribute a version of your script without the dependency on pageboy by compiling it:\n# copy above into `onetwo.pb` onetwo.pb -c \u0026gt; onetwo.sh chmod +x ./onetwo.sh ./onetwo.sh onetwo Big Example\n#!/usr/bin/env pageboy cat \u0026lt;($PAGE php) \u0026lt;($PAGE ruby) \u0026lt;($PAGE bash1) \u0026lt;($PAGE bash2) \u0026lt;($PAGE php2) #!/usr/bin/env php \u0026lt;?php for ($i=10; $i\u0026lt;=20; $i++) { echo $i . \u0026#34;\\n\u0026#34;; } #!/usr/bin/env ruby 5.times do puts \u0026#34;Hello, World! ~ruby1\u0026#34; end #!/bin/bash echo \u0026#34;Hello, World! ~bash2\u0026#34; whoami #!/usr/bin/env bash env | grep TERM #!/usr/bin/env php \u0026lt;?php echo __DIR__; 10 11 12 13 14 15 16 17 18 19 20 Hello, World! ~ruby1 Hello, World! ~ruby1 Hello, World! ~ruby1 Hello, World! ~ruby1 Hello, World! ~ruby1 Hello, World! ~bash2 khtdr TERM_PROGRAM=iTerm.app TERM=xterm-256color ITERM_PROFILE=Default ITERM_SESSION_ID=w0t0p0 /home/khtdr/ standard features pageboy -h pageboy-v2.1.3 pageboy # runs as pageboy script pageboy -r \u0026lt;page\u0026gt; # runs requested page pageboy -p \u0026lt;page\u0026gt; # prints requested page pageboy -c # compiles to bash script pageboy -d # dumps page table pageboy -h # shows this message https://github.com/khtdr/pageboy More examples can be found in the tests directory.\nadvanced features Pages can be named, see pageboy/tests/named.pb Args can be passed in, see pageboy/tests/args.pb The full source code and examples are available at: khtdr/pageboy\n","href":"https://khtdr.com/pageboy.html","tags":["command-line","tools"],"title":"pageboy"},{"categories":["software"],"content":"Introduction Useful when converting a list of file names into a nested UL/LI tree. Perfect for site maps, and directory listings.\nProvide a list of file names:\nblog/all.html blog/2036/overflows.html And recieve a directory-like tree:\nblog all.html 2036 overflows.html Installation Install it with NPM:\nnpm install --save treeify-paths Import with modern syntax:\nimport treeifyPaths from \u0026#34;treeify-paths\u0026#34;; Or if you are not using NPM, install the library by downloading the source file directly and including it in your project:\ncurl -o treeify-paths.js \u0026#34;https://raw.githubusercontent.com/khtdr/treeify-paths/blob/master/dist/treeify-paths.js\u0026#34; Load with classic syntax:\nlet treeify_paths = require(\u0026#34;./treeify-paths\u0026#34;).default; The library itself is written in a few lines of typescript.\nExample Usage This module provides a function treeifyPaths that takes a list of file names and returns a directory-like tree.\ntype Tree :{ path :string // full path to this node name :string // name of this leaf children :Tree[] // sub tree of trees and leaves } treeifyPaths(paths :string[]) =\u0026gt; :Tree This example produces prints the following output:\nimport treeifyPaths from \u0026#39;treeify-paths\u0026#39;; console.log(JSON.stringify(treeifyPaths([ \u0026#39;about.html\u0026#39;, \u0026#39;careers\u0026#39;, \u0026#39;careers/job-1.html\u0026#39;, \u0026#39;careers/job-2.html\u0026#39;, \u0026#39;to/some/page.aspx\u0026#39;, ]), null, 3); { \u0026quot;path\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;children\u0026quot;: [ { \u0026quot;path\u0026quot;: \u0026quot;about.html\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;about.html\u0026quot;, \u0026quot;children\u0026quot;: [] }, { \u0026quot;path\u0026quot;: \u0026quot;careers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;careers\u0026quot;, \u0026quot;children\u0026quot;: [ { \u0026quot;path\u0026quot;: \u0026quot;careers/job-1.html\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;job-1.html\u0026quot;, \u0026quot;children\u0026quot;: [] }, { \u0026quot;path\u0026quot;: \u0026quot;careers/job-2.html\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;job-2.html\u0026quot;, \u0026quot;children\u0026quot;: [] } ] }, { \u0026quot;path\u0026quot;: \u0026quot;to\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;children\u0026quot;: [ { \u0026quot;path\u0026quot;: \u0026quot;to/some\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;children\u0026quot;: [ { \u0026quot;path\u0026quot;: \u0026quot;to/some/page.aspx\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;page.aspx\u0026quot;, \u0026quot;children\u0026quot;: [] } ] } ] } ] } Online Interactive Examples\nLive example Download example Testing The mocha tests have many examples\n\u0026gt; treeify-paths@1.0.2 pretest khtdr/treeify-paths \u0026gt; tsc lib.ts \u0026amp;\u0026amp; mv lib.js treeify-paths.js \u0026gt; treeify-paths@1.0.2 test khtdr/treeify-paths \u0026gt; mocha tests.js treeifyPaths([...arguments]) arguments: none âœ“ should return an empty object arguments: empty list âœ“ should return an empty object arguments: list with a single file âœ“ should return a single file âœ“ should return with nested children arguments: multiple file names âœ“ should return with nested children âœ“ should alphabetize âœ“ should ignore duplicates 7 passing (8ms) The full source code and examples are available at: khtdr/treeify-paths\n","href":"https://khtdr.com/treeify-paths.html","tags":["javascript","node-js","npm","typescript","typescript-bindings"],"title":"treeify-paths"},{"categories":["software"],"content":" A dependency-free, small, fast, good-looking React SVG icon set.\nSee: http://khtdr.com/react-zondicons/ for installation, usage, documentation, and examples.\nSource Code at https://github.com/khtdr/react-zondicons\n","href":"https://khtdr.com/react-zondicons.html","tags":["react","javascript","icons","npm","typescript-bindings"],"title":"react-zondicons"},{"categories":["tutorials"],"content":" Building your own live-reloading web server Follow along and build your own automatically-refreshing web server, as shown here: This setup assumes you know and use Node and NPM You are editing HTML, CSS, and Javascript by hand, because you like it. You\u0026#39;ve had some of that hot-reloading goodness before, and you want it now, too.\nYou don\u0026#39;t feel like spending the weekend reading Webpack docs, so you decide that it should only take a few dozen lines of Javascript, at most, to roll your own.\nYou already have node and npm installed. So you go for it.\nPlanning a solution You will want to be able to:\nserve static files refresh the page whenever a file changes For serving static files, there are many options to choose. The best choice will be the one that allows you to solve the \u0026#34;refresh\u0026#34; problem easiest.\nBut how can you refresh the page when a file changes? Your browser will not have direct access to the files you are editing, so it will rely on a smart web-server that has access to your file system.\nYou will need to:\ndetect when a file changes send a signal from the server to the web browser trigger a refresh on the page Simple enough :)\nPutting the solution together Building the web server Express.js has a built-in solution for serving static files. And Node.js already has the http server. Start by creating a project directory and installing the first dependency.\nmkdir ./live-reload-server cd ./live-reload-server npm init -y npm install express This HTTP server will listen on port 8080 and serves files found in the same directory.\nvar express = require(\u0026#39;express\u0026#39;); var app = express(); app.use(express.static(__dirname)); var http = require(\u0026#39;http\u0026#39;).Server(app); http.listen(8080); Save the code above to a file named ./server.js and run it:\nnode server.js You can verify it is working by opening a browser and going to https://localhost:8080/server.js. You will see your code that is running. Now, create a minimal webpage with a reference to a stylesheet.\nCreate the HTML and save it to ./index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#39;stylesheet\u0026#39; href=\u0026#39;/theme.css\u0026#39; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; Greetings! \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; and the CSSâ€¦\necho \u0026#34;body { background-color:yellow }\u0026#34; \u0026gt; ./theme.css Make sure the server is running, and go to https://localhost:8080. You will see a yellow page with your greeting. So far, so good!\nImplementing the \u0026#34;live-reload\u0026#34; feature Node.js provides a file-watcher you can use to monitor the directory for changes. But the docs also have something to say about using this feature.\nThe fs.watch API is not 100% consistent across platforms, and is unavailable in some situations.\nThe recursive option is only supported on OS X and Windows.\nLuckily(?) for you, this is good enough to get started. You will still need to signal to the browser when a change is detected, and for that you can use Socket.io.\nnpm install socket.io socket.io-client The code is straight forward: watch the working directory for changes and emit an event with Socket.io.\nvar fs = require(\u0026#39;fs\u0026#39;); var io = require(\u0026#39;socket.io\u0026#39;)(http); fs.watch(__dirname, { recursive:true }, function () { io.emit(\u0026#39;file-change-event\u0026#39;); }); The Socket.io server can be started various ways. Here it is given the HTTP server from the previous step.\nFinally, a puzzle to solve. Something needs to listen for the file-change-event emitted by the server. Upon receiving the event, the page also needs refreshed. So it makes sense to put the \u0026#34;listening code\u0026#34; on the webpage itself.\nFor obviously obvious reasons, you don\u0026#39;t want to add the javascript to every page you fiddle with. Better to have the server inject it automatically for you!\nSo what is this \u0026#34;listening code\u0026#34; that needs to be on every HTML page?\n\u0026lt;script src=\u0026#34;/node_modules/socket.io-client/dist/socket.io.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var socket = io(); socket.on(\u0026#34;file-change-event\u0026#34;, function () { window.location.reload(); }); \u0026lt;/script\u0026gt; The snippet above includes the client library that we installed with NPM earlier. It creates a new Socket.io client, and upon receiving the file-change-event from the server, reloads the page.\nNow you need to serve that snippet of javascript along with every HTML page. Back to Express.\nWrite a GET handler that intercepts requests for HTML pages and appends the \u0026#34;listening code\u0026#34; to the page.\napp.get(\u0026#39;/index.html\u0026#39;, function (_, res) { fs.readFile(__dirname + \u0026#39;/index.html\u0026#39;, function (_, data) { res.send(data + \u0026#39;\u0026lt;script src=\u0026#34;/node_modules/socket.io-client/dist/socket.io.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; + \u0026#39;\u0026lt;script\u0026gt;\u0026#39; + \u0026#39; var socket = io();\u0026#39; + \u0026#39; socket.on(\u0026#34;file-change-event\u0026#34;, function () {\u0026#39; + \u0026#39; window.location.reload();\u0026#39; + \u0026#39; });\u0026#39; + \u0026#39;\u0026lt;/script\u0026gt;\u0026#39; ); }); }); That solves the problem for the index.html page, but what about the rest of the HTML pages? Instead of hard-coding the path, you can use a regular expression to intercept requests for HTML pages and directories.\nWhen a request ends in a slash, take care to append index.html to the requested path.\nChange:\napp.get(\u0026#39;/index.html\u0026#39;, function (_, res) { fs.readFile(__dirname + \u0026#39;/index.html\u0026#39;, function (_, data) { //... }); }); to:\napp.get([/\\/$/, /.*\\.html$/], function (req, res) { var filename = __dirname + req.path; filename += filename.endsWith(\u0026#39;/\u0026#39;)? \u0026#39;index.html\u0026#39;: \u0026#39;\u0026#39;; fs.readFile(filename, function (_, data) { //... }); }); Final result, copy+paste and start hacking Now, putting it all together!\nvar express = require(\u0026#39;express\u0026#39;); var app = express(); app.get([/\\/$/, /.*\\.html$/], function (req, res) { var filename = __dirname + req.path; filename += filename.endsWith(\u0026#39;/\u0026#39;)? \u0026#39;index.html\u0026#39;: \u0026#39;\u0026#39;; fs.readFile(filename, function (_, data) { res.send(data + \u0026#39;\u0026amp;lt;script src=\u0026#34;/node_modules/socket.io-client/dist/socket.io.js\u0026#34;\u0026amp;gt;\u0026amp;lt;/script\u0026amp;gt;\u0026#39; + \u0026#39;\u0026amp;lt;script\u0026amp;gt;\u0026#39; + \u0026#39; var socket = io();\u0026#39; + \u0026#39; socket.on(\u0026#34;file-change-event\u0026#34;, function () {\u0026#39; + \u0026#39; window.location.reload();\u0026#39; + \u0026#39; });\u0026#39; + \u0026#39;\u0026amp;lt;/script\u0026amp;gt;\u0026#39; ); }); }); app.use(express.static(__dirname)); var http = require(\u0026#39;http\u0026#39;).Server(app); http.listen(8080); var fs = require(\u0026#39;fs\u0026#39;); var io = require(\u0026#39;socket.io\u0026#39;)(http); fs.watch(__dirname, { recursive:true }, function () { io.emit(\u0026#39;file-change-event\u0026#39;); }); That\u0026#39;s it!\nStart the server with node server.js, go to https://localhost:8080 in your browser, and take a good look at your yellow page. Open up the css file you created earlier, and change yellow to orange. Save, but don\u0026#39;t refresh your page. Just observe. The page will automatically update.\nThe files in this tutorial can be found at:\ngithub.com/khtdr/live-reload-web-server\n","href":"https://khtdr.com/simple-live-reload-server.html","tags":["javascript","live-reload","socket-io","express","node-js"],"title":"Simple live-reloading Nodejs web server"}],"tags":[{"name":"css","permalink":"https://khtdr.com/tags/css.html"},{"name":"command-line","permalink":"https://khtdr.com/tags/command-line.html"},{"name":"javascript","permalink":"https://khtdr.com/tags/javascript.html"},{"name":"node-js","permalink":"https://khtdr.com/tags/node-js.html"},{"name":"npm","permalink":"https://khtdr.com/tags/npm.html"},{"name":"tools","permalink":"https://khtdr.com/tags/tools.html"},{"name":"typescript","permalink":"https://khtdr.com/tags/typescript.html"},{"name":"typescript-bindings","permalink":"https://khtdr.com/tags/typescript-bindings.html"},{"name":"icons","permalink":"https://khtdr.com/tags/icons.html"},{"name":"react","permalink":"https://khtdr.com/tags/react.html"},{"name":"live-reload","permalink":"https://khtdr.com/tags/live-reload.html"},{"name":"tailwind-css","permalink":"https://khtdr.com/tags/tailwind-css.html"},{"name":"express","permalink":"https://khtdr.com/tags/express.html"},{"name":"socket-io","permalink":"https://khtdr.com/tags/socket-io.html"}]}